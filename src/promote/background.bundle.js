!function(e){var t={};function n(a){if(t[a])return t[a].exports;var r=t[a]={i:a,l:!1,exports:{}};return e[a].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,a){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(n.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(a,r,function(t){return e[t]}.bind(null,r));return a},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=34)}({34:function(e,t,n){"use strict";n.r(t);n(35),n(36),n(37),n(38);async function a(e){if("anima"===window.extensionName&&!r&&window.userData){const e=window.userData&&window.userData.email?window.userData.email:"";e?chrome.runtime.setUninstallURL(`${window.API_PROJECT}/chrome-extension-uninstall?email=${e}`):chrome.runtime.setUninstallURL(window.API_PROJECT+"/chrome-extension-uninstall")}}window.userLogin=!1,window.mainButton="code",window.extensionName=null,window.userData,window.access_token,chrome.runtime.onMessage.addListener((e,t,n)=>("sendApi"==e.api?async function(e,t,n="GET",a,r=!1,o){let s=t&&"projects"===t.baseUrl?window.API_PROJECT:window.API_URL;a&&"localhost"===a.baseUrl&&(s="http://localhost:5007");const i=r?e:`${s}${e}`;t&&t.baseUrl&&delete t.baseUrl;const c={method:n,headers:a,body:t?JSON.stringify(t):null};let l=await fetch(i,c);if(200==l.status){if(a&&a.toText){return await l.text()}return await l.json()}return{error:await l.json()}}(e.url,e.data,e.method,e.header,e.overwriteUrl).then(e=>{n(e)}):"logout"===e.api?(window.userData=null,window.access_token=null,chrome.tabs.getAllInWindow(e=>{e.map(e=>{chrome.tabs.sendMessage(e.id,{message:"logout"},null,()=>{})})})):"loadFeatureFlag"===e.api?(window.mainButton=e.mainButton,window.extensionName=e.extensionName,a()):"userLogin"===e.api?(window.userLogin=e.isLogin,a()):"updateUserCache"===e.api&&(window.userData=e.userData,window.access_token=e.access_token,a()),!0)),chrome.runtime.onInstalled.addListener((function(e){chrome.tabs.query({currentWindow:!0},(function(e){const t=chrome.runtime.getManifest().content_scripts[0].js[0];for(let n=0;n<e.length;n++)chrome.tabs.executeScript(e[n].id,{file:t},e=>{})}))}));let r=!0;r&&chrome.tabs.onUpdated.addListener((e,t,n)=>{console.log("changeInfo.status",t.status),"complete"===t.status&&n.url.includes("figma.com")&&chrome.tabs.executeScript(e,{file:"app/app.bundle.js"},()=>{})})},35:function(e,t){window.API_URL="https://api.animaapp.com",window.API_PROJECT="https://projects.animaapp.com"},36:function(e,t){var n=!1;let a,r=null;chrome.runtime.onMessage.addListener((e,t,s)=>{if("getFigmaDesignFromAnima"===e.api){r=t.tab.id,n=!1,clearTimeout(a),a=setTimeout(()=>{n=!0},36e4),t&&t.tab&&t.tab.id&&o.push(t.tab.id);let i=e.data,c=e.accessToken;i.fileId;(async function(e,t){const a={method:"POST",headers:{"Content-Type":"application/json",Authorization:t="JWT "+t},body:JSON.stringify(e)};let r;try{r=await fetch("https://figma-service.animaapp.com/generate/async",a)}catch(e){console.error(e)}if(200==r.status||201==r.status){n=!1;let e,a=await r.json();try{e=await async function e(t){let a=await async function(e,t){const n={method:"POST",headers:{"Content-Type":"application/json",Authorization:e.accessToken},body:JSON.stringify(e)};let a;try{a=await fetch("https://figma-service.animaapp.com/task/callback",n)}catch(e){console.error(e)}if(400===a.status)return a;if(200===a.status)return a;if(204===a.status)return chrome.tabs.getAllInWindow(e=>{e.map(e=>{chrome.tabs.sendMessage(e.id,{to:"AnimaStore",message:"add-percentage"},null,()=>{})})}),new Promise(e=>{setTimeout(()=>{e(a)},2e3)})}(t);if(a.error)return a;if(400===a.status)return a=await a.json(),a;if(204===a.status&&!n)return await e(t);if(200===a.status){return function(e){let t=e.project_short_id,n=e.homepage_slug,a=e.short_id;return`http://projects.animaapp.com/p/${t}/${a}/${n}/syncwebsite?extensionName=${window.extensionName}`}(await a.json())}if(n)return{error:"Error: convert Figma file to design failed"}}({taskId:a.taskId,accessToken:t})}catch(e){return{error:"Error: convert Figma file to design failed"}}if(e.error)return e;let o=e.replace("projects.","canary-projects.").replace("prototype","omniview"),s=e.replace("projects.animaapp.com","localhost:5002").replace("prototype","omniview").replace("https","http"),i=e.replace("prototype","omniview");return console.log("canaryUrl",o),console.log("localhostUrl",s),console.log("prodUrl",i),window.API_PROJECT.includes("https://projects.animaapp.com")?i:o}return 400===r.status?(r=await r.json(),{error:r.message}):{error:"Error: async design failed"}})(i,c).then(e=>{clearTimeout(a),e&&setTimeout(()=>{s(e)},2e3)})}return!0});let o=[]},37:function(e,t){let n,a=!1,r=[];chrome.runtime.onMessage.addListener((e,t,a)=>{let c={platform:"figma",to:e.type?e.type:"login"};return"getLoginUrl"===e.api?(t&&t.tab&&t.tab.id&&r.push(t.tab.id),clearTimeout(n),n=setTimeout(()=>{clearInterval(this.intervalInstance)},18e4),i(null,c,e.dontAddSource).then(e=>{a(e)})):"getFigmaAccessToken"===e.api?o(e.body,e.access_token):"checkIfWeHaveStorageUser"===e.api?a({userData:window.userData,access_token:window.access_token}):"getUserAfterLogin"===e.api&&l(e.data.pairingToken,c).then(e=>{t&&t.tab&&t.tab.id&&r.push(t.tab.id);let n={headers:{"X-Client-Id":"com.animaapp.figma","X-Client-Version":"0.0.1",Authorization:"JWT "+e.access_token}};s(n).then(t=>{window.userData=t,window.access_token=e.access_token,a({user:t,access_token:e.access_token})})}),!0});const o=async(e,t)=>{const n=window.API_URL+"/figma_token/generate",a={method:"POST",headers:{"Content-Type":"application/json","X-Client-Id":"com.animaapp.figma","X-Client-Version":"0.0.1",Authorization:"JWT "+t},body:e};await fetch(n,a)},s=async e=>{const t=window.API_URL+"/users/me",n={method:"GET",headers:{"Content-Type":"application/json"}};e.headers&&(n.headers=Object.assign(n.headers,e.headers));let a=await fetch(t,n);if(200==a.status){return await a.json()}{console.log("ERROR GETTING CURRENT USER > ",a);let e=await a.json();if(e.error){let t=new Error(e.description||"Something went wrong!");throw t.statusCode=e.status_code||a.status||500,t.error=e.error||"Error",t}{let e=new Error("Something went wrong!");throw e.statusCode=a.status||500,e.error="Error",e}}},i=async(e,t={},n)=>{try{if(!e){e=(await c(t)).token}let a=`${window.API_PROJECT}/${t&&t.to&&"signup"===t.to?"signup":"login"}?pairing=true&pt=${e}&platform=${t.platform}`;return t&&(a+=n||`&platform=${t.platform}&utm_medium=plugin&utm_source=figma&utm_content=signup-button`),{url:a,pairingToken:e}}catch(e){throw console.log("ERROR > GETTING BROWSER LOGIN URL > ",e),e}},c=async(e={})=>{try{a=!1;const t=window.API_URL+"/rpc/generate_pairing_token",n={method:"POST",headers:{"Content-Type":"application/json"}};e.headers&&(n.headers=Object.assign(n.headers,e.headers));let r=await fetch(t,n);if(200==r.status){return await r.json()}let o=await r.json();if(o.error){let e=new Error(o.description||"Something went wrong!");throw e.statusCode=o.status_code||r.status||500,e.error=o.error||"Error",e}{let e=new Error("Something went wrong!");throw e.statusCode=r.status||500,e.error="Error",e}}catch(e){throw console.log("ERROR > GENERATING PAIRING TOKEN > ",e),e}},l=async(e,t={})=>new Promise(async(n,r)=>{try{if(!e){let n=await this.generatePairingToken(t);e=n.token}const o=async()=>{try{let a=await u(e,t);a.result&&"ok"==a.result&&(clearInterval(this.intervalInstance),n(a))}catch(e){console.error("ERROR > GETTING ACCESS TOKEN > "),clearInterval(this.intervalInstance),r(e)}};a||(this.intervalInstance=setInterval(o,2e3))}catch(e){console.log("ERROR > GETTING ACCESS TOKEN > ",e),r(e)}}),u=async(e,t={})=>{try{const n=`${window.API_URL}/rpc/pairing_token?t=${e}`,a={method:"GET",headers:{"Content-Type":"application/json"}};t.headers&&(a.headers=Object.assign(a.headers,t.headers));let r=await fetch(n,a);if(200==r.status){return await r.json()}let o=await r.json();if(o.error){let e=new Error(o.description||"Something went wrong!");throw e.statusCode=o.status_code||r.status||500,404==e.statusCode&&(e.message="Failed to pair. Please try again!"),e.error=o.error||"Error",e}{let e=new Error("Something went wrong!");throw e.statusCode=r.status||500,404==e.statusCode&&(e.message="Failed to pair. Please try again!"),e.error="Error",e}}catch(e){throw console.log("ERROR > GENERATING AUTH URL > ",e),e}};function d(e){r.find(t=>t===e)&&clearInterval(this.intervalInstance)}chrome.tabs.onRemoved.addListener(e=>{d(e)}),chrome.tabs.onUpdated.addListener(e=>{d(e)})},38:function(e,t){let n=!1;function a(e,t,n,a={}){var o={eventCategory:"General",eventAction:e||"",uid:r};a.extensionName=window.extensionName,o.params=JSON.stringify(a);var s=function(e){var t="";for(var n in e)e.hasOwnProperty(n)&&(t.length>0&&(t+="&"),t+=encodeURI(n+"="+e[n]));return t}(o),i=new XMLHttpRequest;i.open("POST","https://logs.animaapp.com/analytics/collect",!0),i.setRequestHeader("Content-type","application/x-www-form-urlencoded"),i.setRequestHeader("X-User-Email",n||""),i.setRequestHeader("X-Client-Id","com.animaapp.chrome.extension"),i.setRequestHeader("X-Client-Version","1.0.0"),i.send(s)}chrome.runtime.onMessage.addListener((e,t,s)=>{if("trackEvent"===e.api){if(t&&t.origin&&"string"==typeof t.origin&&t.origin.includes(".figma.")){let t=e.params?e.params:{};a(e.eventName,e.userId,e.userEmail,t)}}else"firstRefresh"===e.api?(r=e.UUID,n&&(n=!1,setTimeout(()=>{a("chrome.extension.installed","","")},5e3))):"alias"===e.api&&async function(e,t){if(r&&e){const n={alias:e,distinct_id:r};try{let a="https://logs.animaapp.com/analytics/register_alias";await function(e,t,n,a){return new Promise((r,s)=>{const i=o(t),c=new XMLHttpRequest;c.open("POST",e,!0),c.setRequestHeader("Content-type","application/x-www-form-urlencoded"),c.setRequestHeader("X-User-Id",n||""),c.setRequestHeader("X-User-Email",a||""),c.setRequestHeader("X-Client-Id","com.animaapp.chrome.extension"),c.setRequestHeader("X-Client-Version","1.0.0");for(const e in this.headers){const t=this.headers[e];c.setRequestHeader(e,t)}c.onreadystatechange=function(){4===c.readyState&&200===c.status?s(c.response):r({status:c.status,statusText:c.statusText})},c.onerror=function(){r({status:c.status,statusText:c.statusText})},c.send(i)})}(a,n,e,t)}catch(e){console.log("register_alias failed",e)}}}(e.userId,e.email);return!0});let r=null;chrome.runtime.onInstalled.addListener((function(e){"install"==e.reason&&(n=!0)}));const o=e=>{let t="";for(let n in e)e.hasOwnProperty(n)&&(t.length>0&&(t+="&"),t+=encodeURI(n+"="+e[n]));return t}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,